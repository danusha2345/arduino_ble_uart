# GitHub Action for building and releasing PlatformIO firmware.

name: Build and Release Firmware

# This action is triggered on every push to a tag that starts with 'v' (e.g., v1.0, v2.1.0).
on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    # Grant the GITHUB_TOKEN permissions to write to the repository (for creating a release).
    permissions:
      contents: write
    steps:
      # 1. Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # 2. Set up Python, which is required by PlatformIO
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      # 3. Install PlatformIO Core
      - name: Install PlatformIO
        run: pip install -U platformio

      # 3.5. Clean library cache to ensure correct versions
      - name: Clean PlatformIO Cache
        run: |
          rm -rf .pio/libdeps/ || true
          pio pkg uninstall --global "moononournation/GFX Library for Arduino" || true
          pio pkg uninstall --global "GFX Library for Arduino" || true

      # 4. Build for ESP32-C3
      - name: Build ESP32-C3 Firmware
        run: pio run --environment esp32-c3

      # 5. Build for ESP32-S3
      - name: Build ESP32-S3 Firmware
        run: pio run --environment esp32-s3

      # 6. Prepare release files with proper naming
      - name: Prepare Release Files
        run: |
          chmod +x .github/scripts/create-unified.sh
          .github/scripts/create-unified.sh

      # 7. List final release files
      - name: List Release Files
        run: |
          echo "Unified firmware files:"
          ls -lh release/unified*.bin || echo "No unified files"
          echo ""
          echo "Individual files:"
          ls -lh release/*-esp32*.bin || echo "No individual files"
          echo ""
          echo "Info files:"
          cat release/*-info.txt || echo "No info files"

      # 8. Display firmware sizes and flashing info
      - name: Display Firmware Information
        run: |
          if [ -f "release/unified-esp32c3.bin" ]; then
            echo "## ESP32-C3 Firmware"
            echo "Size: $(du -h release/unified-esp32c3.bin | cut -f1)"
            echo "Flash command: esptool.py write_flash 0x0 unified-esp32c3.bin"
            echo ""
          fi
          
          if [ -f "release/unified-esp32s3.bin" ]; then
            echo "## ESP32-S3 Firmware"
            echo "Size: $(du -h release/unified-esp32s3.bin | cut -f1)"
            echo "Flash command: esptool.py write_flash 0x0 unified-esp32s3.bin"
            echo ""
          fi
          
          echo "## Individual Files (Alternative) "
          echo "Download individual files if you prefer separate flashing"

      # 9. Create Release Name based on tag
      - name: Generate Release Name
        id: release_name
        run: echo "name=Firmware ${{ github.ref_name }}" >> $GITHUB_OUTPUT

      # 10. Create a new GitHub Release and upload firmware files
      - name: Create Release and Upload Firmware
        uses: softprops/action-gh-release@v1
        with:
          # Custom release name
          name: ${{ steps.release_name.outputs.name }}
          
          # Generate release notes
          body: |
            ## Universal ESP32-C3/ESP32-S3 GPS/GNSS to BLE Bridge
            
            ### 🚀 Quick Flash (Recommended)
            
            **ESP32-C3 (Single-Core)**
            - Download: `unified-esp32c3.bin`
            - Flash: `esptool.py write_flash 0x0 unified-esp32c3.bin`
            
            **ESP32-S3 (Dual-Core Enhanced)**  
            - Download: `unified-esp32s3.bin`
            - Flash: `esptool.py write_flash 0x0 unified-esp32s3.bin`
            
            ### 📦 Individual Files (Advanced)
            
            **ESP32-C3**
            - `firmware-esp32c3.bin` - Main firmware (0x10000)
            - `bootloader-esp32c3.bin` - Bootloader (0x0000)
            - `partitions-esp32c3.bin` - Partition table (0x8000)
            
            **ESP32-S3**
            - `firmware-esp32s3.bin` - Main firmware (0x10000)
            - `bootloader-esp32s3.bin` - Bootloader (0x0000)
            - `partitions-esp32s3.bin` - Partition table (0x8000)
            
            ### 🎯 What's New
            
            - 🔄 **Universal Support**: Both ESP32-C3 and ESP32-S3 boards
            - ⚡ **Updated Platform**: PlatformIO espressif32@6.12.0
            - 📚 **Library Updates**: Arduino_GFX 1.4.7, NimBLE 2.3.6
            - 🔧 **Unified Firmware**: Single-file flashing with proper offsets
            - 🛠️ **Dual Environment Build**: Separate builds for C3 and S3
            - 📋 **Complete Docs**: Full installation instructions
            
            ### 📋 Installation
            
            **Easy Method:**
            1. Download the unified firmware file for your board
            2. Flash using the command above
            3. Board type is already selected in the firmware
            
            **Advanced Method:**
            1. Download individual files
            2. Flash bootloader first (0x0), then partitions (0x8000), then firmware (0x10000)
            3. Configure board accordingly
            
            🔗 [Full Documentation](https://github.com/your-repo/blob/main/README.md)
          
          # Upload both unified and individual firmware files
          files: |
            release/unified-*.bin
            release/bootloader-*.bin
            release/firmware-esp32*.bin
            release/partitions-*.bin
            release/*-info.txt
          
          # The action will use the tag name as the release tag.
          token: ${{ secrets.GITHUB_TOKEN }}
          
          # Make this the latest release
          prerelease: false